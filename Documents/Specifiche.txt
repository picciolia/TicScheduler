Si richiede la realizzazione di una piccola applicazione progettata per girare in background su di un server (dotato di desktop-manager) e che potrà essere gestita e controllata tramite una QSystemTrayIcon (http://doc.qt.io/qt-5/qsystemtrayicon.html#details).

Lo scopo di questa applicazione sarà quello di fornire la possibilità di eseguire in modo periodico (ogni 10 secondi, ogni 2 ore, il lunedì martedì e mercoledì alle 12:00, ...) una serie di "task" indipendenti tra di loro. La periodicità sarà configurabile per il singolo task così da permettere, ad esempio, che il task "T1" venga eseguito una volta ogni ora mentre il task "T2" venga eseguito una volta ogni

10 secondi. Tramite la QSystemTrayIcon l'utente avrà la possibilità di interagire con l'applicazione accedendo a tutte le configurazioni e i parametri richiesti dai vari tasks.

Il compito principale del candidato sarà quindi quello di progettare e implementare uno schedulatore generico di tasks, ponendo molta attenzione alla modularità. Si richiede infatti che lo schedulatore consenta facilmente di:

-ampliare il set di task a disposizione

-complicare a piacere le periodicità supportate

Ai fini del test è sufficiente che l'applicazione supporti 2 task indipendenti. Il primo task dovrà consentire la scelta di un testo, tramite GUI, che verrà stampato in debug ogni 10 secondi. Il secondo dovrà controllare, ogni 30 secondi, se uno specifico file ("C:/ESEMPIO.txt") esiste. Nel caso non esista, stampare in debug un messaggio di notifica. Per semplicità non si richiede che le periodicità dei task siano configurabili tramite GUI (basta siano modulari e configurabili lato programmazione).

Si richiede inoltre che i vari tasks vengano eseguiti in modo serializzato e non parallelo. Si ammette, ma non richiede, l'esistenza di un thread dedicato all'esecuzione dei tasks (separato dal principale per la GUI), ma non sarà possibile avere un thread specifico per ciascun task. Se la richiesta di esecuzione di un task arriva mentre si sta già eseguendo un secondo task, l'esecuzione dovrà essere posticipata alla fine del task in corso.

 

Specifiche

-Fare molta attenzione alle specifiche

-Sistema Operativo Suggerito: Windows

-Versione Qt: 5.9.6

-se sotto windows, la versione con compilatore MinGW

-Non usare il Qt-Designer

-Non è ammesso l'uso di componenti QML

-Usare esclusivamente componenti Qt

-Le stl sono ammesse solo per funzioni marginali (es: <algorithm>, <cmath>, ...)

- Il progetto deve essere presentato su repository GIT

 

Fare molta attenzione a: pulizia, semplicità e chiarezza del codice; architettura OOP (ogni componente ha uno scopo ben preciso); commenti e documentazione a supporto